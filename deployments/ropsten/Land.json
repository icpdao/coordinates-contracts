{
  "address": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyedAddress",
          "type": "address"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        }
      ],
      "name": "GiveTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        }
      ],
      "name": "SetSlogan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "buyTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCoordinates",
      "outputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "getCoordinatesString",
      "outputs": [
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        }
      ],
      "name": "giveTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        }
      ],
      "name": "givedLand",
      "outputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "buyedAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBuyed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isGived",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "land",
      "outputs": [
        {
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "buyedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBuyed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isGived",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        }
      ],
      "name": "setSlogan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "buyedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBuyed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isGived",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
  "receipt": {
    "to": null,
    "from": "0x26Ac833AEde4ee4b330E7A67b57F4eaB40B65E5c",
    "contractAddress": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
    "transactionIndex": 13,
    "gasUsed": "3190366",
    "logsBloom": "0x
    "blockHash": "0x2b04811900236f3867242641fcfa6cf989a1ce0092474a379da8fef8e8796114",
    "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 11422810,
        "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
        "address": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000026ac833aede4ee4b330e7a67b57f4eab40b65e5c"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x2b04811900236f3867242641fcfa6cf989a1ce0092474a379da8fef8e8796114"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11422810,
        "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
        "address": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000026ac833aede4ee4b330e7a67b57f4eab40b65e5c",
          "0x000000000000000000000000ace84e2a50efcf847c3a1d21018cecc2075e4a78"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x2b04811900236f3867242641fcfa6cf989a1ce0092474a379da8fef8e8796114"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11422810,
        "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
        "address": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ace84e2a50efcf847c3a1d21018cecc2075e4a78",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x2b04811900236f3867242641fcfa6cf989a1ce0092474a379da8fef8e8796114"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11422810,
        "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
        "address": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
        "topics": [
          "0xe20b07b22286906698dfaed9341c2187f29ec7e118f5283cd0b81d3796fc0c17"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 43,
        "blockHash": "0x2b04811900236f3867242641fcfa6cf989a1ce0092474a379da8fef8e8796114"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11422810,
        "transactionHash": "0x612ab0cf9d4b363075ca40cd62e2fc875cb0a6674a7475181bf2b02b94909e35",
        "address": "0x68EC3d4337f8D0A7E6653BD47bcB160CD501E44E",
        "topics": [
          "0x315581f8fced1d4d8d321a598f896b9f857c52dfefae7188fbfde64900d62d9b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ace84e2a50efcf847c3a1d21018cecc2075e4a78",
        "logIndex": 44,
        "blockHash": "0x2b04811900236f3867242641fcfa6cf989a1ce0092474a379da8fef8e8796114"
      }
    ],
    "blockNumber": 11422810,
    "cumulativeGasUsed": "5782069",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAce84e2A50EfcF847c3a1d21018cecc2075E4a78"
  ],
  "solcInputHash": "ba4b50f6eb7ab091ed069fc26ccea5c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"}],\"name\":\"GiveTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"}],\"name\":\"SetSlogan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCoordinates\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"getCoordinatesString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"}],\"name\":\"giveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"}],\"name\":\"givedLand\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"land\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"}],\"name\":\"setSlogan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Land.sol\":\"Land\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":175},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Land.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/ILand.sol\\\";\\n\\ncontract Land is ILand, ERC721Enumerable, Ownable {\\n  struct Token {\\n    int128 x;\\n    int128 y;\\n    string slogan;\\n    address buyedAddress;\\n    address givedAddress;\\n    bool isBuyed;\\n    bool isGived;\\n  }\\n\\n  struct Spread {\\n    uint256 tokenId;\\n    address tokenOnwer;\\n    address parent;\\n  }\\n\\n  // tokenid => TOKEN\\n  mapping(uint256 => Token) public tokens;\\n\\n  // givedAddress => tokenid\\n  mapping(address => uint256) public gived;\\n\\n  // buyedAddress => buy count\\n  mapping(address => uint8) public buyCount;\\n  // buyedAddress => buy count\\n  mapping(address => uint256[]) public buyTokens;\\n\\n  // TODO PRICE VALUE\\n  uint256 public constant PRICE = 10 gwei;\\n\\n  modifier hasGived() {\\n    require(\\n      tokens[gived[_msgSender()]].givedAddress == _msgSender(),\\n      \\\"caller is no gived\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier canBuy() {\\n    require(buyCount[_msgSender()] < 2, \\\"caller is already buyed\\\");\\n    _;\\n  }\\n\\n  constructor(address _owner) ERC721(\\\"Land\\\", \\\"LAND\\\") Ownable() {\\n    // TODO owner \\u95ee\\u9898\\n    transferOwnership(_owner);\\n    uint256 tokenId = getTokenId(0, 0);\\n    tokens[tokenId] = Token(0, 0, \\\"\\\", address(0), _owner, true, true);\\n    gived[_owner] = tokenId;\\n    _safeMint(_owner, tokenId);\\n\\n    emit Buy(0, 0, address(0));\\n    emit GiveTo(0, 0, _owner);\\n  }\\n\\n  function buy(int128 x, int128 y) external payable override hasGived canBuy {\\n    uint256 tokenId = getTokenId(x, y);\\n\\n    require(!tokens[tokenId].isBuyed, \\\"token is buyed\\\");\\n    require(msg.value >= PRICE);\\n\\n    tokens[tokenId] = Token(x, y, \\\"\\\", _msgSender(), address(0), true, false);\\n\\n    buyTokens[_msgSender()].push(tokenId);\\n    buyCount[_msgSender()] += 1;\\n\\n    if (msg.value > PRICE) {\\n      payable(_msgSender()).transfer(msg.value - PRICE);\\n    }\\n\\n    emit Buy(x, y, _msgSender());\\n  }\\n\\n  function giveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) external override hasGived {\\n    uint256 tokenId = getTokenId(x, y);\\n\\n    require(\\n      tokens[tokenId].buyedAddress == _msgSender(),\\n      \\\"caller didn't buyed this token\\\"\\n    );\\n    require(!tokens[tokenId].isGived, \\\"token is gived\\\");\\n\\n    tokens[tokenId].givedAddress = givedAddress;\\n    tokens[tokenId].isGived = true;\\n    gived[givedAddress] = tokenId;\\n\\n    _safeMint(givedAddress, tokenId);\\n\\n    emit GiveTo(x, y, givedAddress);\\n  }\\n\\n  function setSlogan(\\n    int128 x,\\n    int128 y,\\n    string memory slogan\\n  ) external override {\\n    uint256 tokenId = getTokenId(x, y);\\n\\n    require(ownerOf(tokenId) == _msgSender(), \\\"token is not belong to caller\\\");\\n    require(bytes(slogan).length < 256, \\\"slogan is too long\\\");\\n\\n    tokens[tokenId].slogan = slogan;\\n\\n    emit SetSlogan(x, y, slogan);\\n  }\\n\\n  function getEth() external override onlyOwner {\\n    payable(_msgSender()).transfer(address(this).balance);\\n  }\\n\\n  function land(int128 x, int128 y)\\n    external\\n    view\\n    override\\n    returns (\\n      string memory slogan,\\n      address buyedAddress,\\n      address givedAddress,\\n      bool isBuyed,\\n      bool isGived\\n    )\\n  {\\n    uint256 tokenId = getTokenId(x, y);\\n    Token memory token = tokens[tokenId];\\n    slogan = token.slogan;\\n    buyedAddress = token.buyedAddress;\\n    givedAddress = token.givedAddress;\\n    isBuyed = token.isBuyed;\\n    isGived = token.isGived;\\n  }\\n\\n  function givedLand(address givedAddress)\\n    external\\n    view\\n    override\\n    returns (\\n      int128 x,\\n      int128 y,\\n      string memory slogan,\\n      address buyedAddress,\\n      bool isBuyed,\\n      bool isGived\\n    )\\n  {\\n    uint256 tokenId = gived[givedAddress];\\n    Token memory token = tokens[tokenId];\\n    x = token.x;\\n    y = token.y;\\n    slogan = token.slogan;\\n    buyedAddress = token.buyedAddress;\\n    isBuyed = token.isBuyed;\\n    isGived = token.isGived;\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory result)\\n  {\\n    require(tokens[tokenId].isBuyed, \\\"not buyed\\\");\\n\\n    (int128 x, int128 y) = getCoordinates(tokenId);\\n\\n    string memory _landStr = string(\\n      abi.encodePacked(\\\"<div>Lootland(\\\", getCoordinatesString(x, y), \\\")</div>\\\")\\n    );\\n\\n    string memory contentStr;\\n    if (tokens[tokenId].isGived) {\\n      string memory _solganStr;\\n      if (bytes(tokens[tokenId].slogan).length == 0) {\\n        // TODO\\n        _solganStr = \\\"<div>loot`s builder</div>\\\";\\n      } else {\\n        _solganStr = string(\\n          abi.encodePacked(\\\"<div>\\\", tokens[tokenId].slogan, \\\"</div>\\\")\\n        );\\n      }\\n      contentStr = string(abi.encodePacked(_solganStr, _landStr));\\n    } else {\\n      string[3] memory buffer;\\n      // TODO\\n      buffer[0] = string(abi.encodePacked(\\\"<div>\\\", \\\"111111\\\", \\\"</div>\\\"));\\n      buffer[1] = string(abi.encodePacked(\\\"<div>\\\", _landStr, \\\"</div>\\\"));\\n      buffer[2] = string(abi.encodePacked(\\\"<div>\\\", \\\"222222\\\", \\\"</div>\\\"));\\n      contentStr = string(abi.encodePacked(buffer[0], buffer[1], buffer[2]));\\n    }\\n    string memory svgStr = string(\\n      abi.encodePacked(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><foreignObject width=\\\"350\\\" height=\\\"350\\\" x=\\\"0\\\" y=\\\"0\\\"><body xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><style>.base { color: white; font-family: serif; font-size: 14px; margin: 10px; }</style><div class=\\\"base\\\">',\\n        contentStr,\\n        \\\"</div></body></foreignObject></svg>\\\"\\n      )\\n    );\\n\\n    result = string(\\n      abi.encodePacked(\\n        \\\"data:application/svg;base64,\\\",\\n        Base64.encode(bytes(svgStr))\\n      )\\n    );\\n  }\\n\\n  function getTokenId(int128 x, int128 y)\\n    public\\n    pure\\n    override\\n    returns (uint256 tokenId)\\n  {\\n    bytes32 xx = bytes16(uint128(x));\\n    bytes32 yy = bytes16(uint128(y));\\n    tokenId = uint256(xx | (yy >> 128));\\n  }\\n\\n  function getCoordinates(uint256 tokenId)\\n    public\\n    pure\\n    override\\n    returns (int128 x, int128 y)\\n  {\\n    x = int128(uint128(tokenId >> 128));\\n    y = int128(uint128(tokenId));\\n  }\\n\\n  function getCoordinatesString(int128 x, int128 y)\\n    public\\n    pure\\n    override\\n    returns (string memory data)\\n  {\\n    string memory xPrefix = \\\"\\\";\\n    if (x > 0) {\\n      xPrefix = \\\"E\\\";\\n    }\\n    if (x < 0) {\\n      xPrefix = \\\"W\\\";\\n    }\\n\\n    string memory xStr;\\n    if (x >= 0) {\\n      xStr = Strings.toString(uint256(int256(x)));\\n    } else {\\n      unchecked {\\n        xStr = Strings.toString(uint256(-int256(x)));\\n      }\\n    }\\n\\n    string memory yPrefix = \\\"\\\";\\n    if (y > 0) {\\n      yPrefix = \\\"N\\\";\\n    }\\n    if (y < 0) {\\n      yPrefix = \\\"S\\\";\\n    }\\n\\n    string memory yStr;\\n    if (y >= 0) {\\n      yStr = Strings.toString(uint256(int256(y)));\\n    } else {\\n      unchecked {\\n        yStr = Strings.toString(uint256(-int256(y)));\\n      }\\n    }\\n\\n    data = string(abi.encodePacked(xPrefix, xStr, \\\",\\\", yPrefix, yStr));\\n  }\\n}\\n\",\"keccak256\":\"0x5abd8980442c5e140babb525a35b644944507f63aa27ece88ecdc0370eb8bbc9\",\"license\":\"MIT\"},\"contracts/interfaces/ILand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILand {\\n  event Buy(int128 x, int128 y, address buyedAddress);\\n  event GiveTo(int128 x, int128 y, address givedAddress);\\n  event SetSlogan(int128 x, int128 y, string slogan);\\n\\n  function buy(int128 x, int128 y) external payable;\\n\\n  function giveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) external;\\n\\n  function setSlogan(\\n    int128 x,\\n    int128 y,\\n    string memory slogan\\n  ) external;\\n\\n  function getEth() external;\\n\\n  function land(int128 x, int128 y)\\n    external\\n    view\\n    returns (\\n      string memory slogan,\\n      address buyedAddress,\\n      address givedAddress,\\n      bool isBuyed,\\n      bool isGived\\n    );\\n\\n  function givedLand(address givedAddress)\\n    external\\n    view\\n    returns (\\n      int128 x,\\n      int128 y,\\n      string memory slogan,\\n      address buyedAddress,\\n      bool isBuyed,\\n      bool isGived\\n    );\\n\\n  function getTokenId(int128 x, int128 y)\\n    external\\n    pure\\n    returns (uint256 tokenId);\\n\\n  function getCoordinates(uint256 tokenId)\\n    external\\n    pure\\n    returns (int128 x, int128 y);\\n\\n  function getCoordinatesString(int128 x, int128 y)\\n    external\\n    pure\\n    returns (string memory data);\\n}\\n\",\"keccak256\":\"0xf8dc43cfa802d2b0deefe1398542a891e1f3338cdbedbd0976f175cbfe694b60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80637a98b16b1161010d578063b3271d65116100a0578063cb05b93e1161006f578063cb05b93e146105fd578063cf26502514610612578063d019b71314610632578063e985e9c514610652578063f2fde38b1461069b57600080fd5b8063b3271d651461056b578063b88d4fde1461058b578063be29010d146105ab578063c87b56dd146105dd57600080fd5b80638da5cb5b116100dc5780638da5cb5b146104d657806395d89b41146104f45780639fefe7f414610509578063a22cb4651461054b57600080fd5b80637a98b16b146104595780637e5a6be81461046c5780638b9c06b81461048c5780638d859f3e146104bd57600080fd5b80632f745c59116101855780634f6ccce7116101545780634f6ccce7146103e45780636352211e1461040457806370a0823114610424578063715018a61461044457600080fd5b80632f745c59146103445780633411cf521461036457806342842e0e146103915780634f64b2be146103b157600080fd5b8063095ea7b3116101c1578063095ea7b3146102b05780630bf37818146102d257806318160ddd1461030f57806323b872dd1461032457600080fd5b806301ffc9a7146101f357806306fdde03146102285780630752881a1461024a578063081812fc14610278575b600080fd5b3480156101ff57600080fd5b5061021361020e366004612a90565b6106bb565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061023d6106e6565b60405161021f919061315b565b34801561025657600080fd5b5061026a610265366004612a67565b610778565b60405190815260200161021f565b34801561028457600080fd5b50610298610293366004612ba2565b6107a9565b6040516001600160a01b03909116815260200161021f565b3480156102bc57600080fd5b506102d06102cb366004612a67565b610843565b005b3480156102de57600080fd5b506102f56102ed366004612ba2565b608081901c91565b60408051600f93840b81529190920b60208201520161021f565b34801561031b57600080fd5b5060085461026a565b34801561033057600080fd5b506102d061033f366004612979565b610959565b34801561035057600080fd5b5061026a61035f366004612a67565b61098a565b34801561037057600080fd5b5061026a61037f366004612926565b600c6020526000908152604090205481565b34801561039d57600080fd5b506102d06103ac366004612979565b610a20565b3480156103bd57600080fd5b506103d16103cc366004612ba2565b610a3b565b60405161021f97969594939291906130b7565b3480156103f057600080fd5b5061026a6103ff366004612ba2565b610b20565b34801561041057600080fd5b5061029861041f366004612ba2565b610bc1565b34801561043057600080fd5b5061026a61043f366004612926565b610c38565b34801561045057600080fd5b506102d0610cbf565b6102d0610467366004612ac8565b610cf5565b34801561047857600080fd5b5061026a610487366004612ac8565b611041565b34801561049857600080fd5b506104ac6104a7366004612ac8565b61106a565b60405161021f95949392919061316e565b3480156104c957600080fd5b5061026a6402540be40081565b3480156104e257600080fd5b50600a546001600160a01b0316610298565b34801561050057600080fd5b5061023d6111ce565b34801561051557600080fd5b50610539610524366004612926565b600d6020526000908152604090205460ff1681565b60405160ff909116815260200161021f565b34801561055757600080fd5b506102d0610566366004612a2d565b6111dd565b34801561057757600080fd5b506102d0610586366004612af1565b6112a2565b34801561059757600080fd5b506102d06105a63660046129b4565b611484565b3480156105b757600080fd5b506105cb6105c6366004612926565b6114bc565b60405161021f9695949392919061310d565b3480156105e957600080fd5b5061023d6105f8366004612ba2565b611637565b34801561060957600080fd5b506102d06118d9565b34801561061e57600080fd5b5061023d61062d366004612ac8565b611932565b34801561063e57600080fd5b506102d061064d366004612b33565b611a85565b34801561065e57600080fd5b5061021361066d366004612947565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106a757600080fd5b506102d06106b6366004612926565b611b93565b60006001600160e01b0319821663780e9d6360e01b14806106e057506106e082611c31565b92915050565b6060600080546106f59061333b565b80601f01602080910402602001604051908101604052809291908181526020018280546107219061333b565b801561076e5780601f106107435761010080835404028352916020019161076e565b820191906000526020600020905b81548152906001019060200180831161075157829003601f168201915b5050505050905090565b600e602052816000526040600020818154811061079457600080fd5b90600052602060002001600091509150505481565b6000818152600260205260408120546001600160a01b03166108275760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061084e82610bc1565b9050806001600160a01b0316836001600160a01b031614156108bc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161081e565b336001600160a01b03821614806108d857506108d8813361066d565b61094a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161081e565b6109548383611c81565b505050565b6109633382611cef565b61097f5760405162461bcd60e51b815260040161081e90613237565b610954838383611de6565b600061099583610c38565b82106109f75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161081e565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61095483838360405180602001604052806000815250611484565b600b6020526000908152604090208054600182018054600f83810b94600160801b909404900b929190610a6d9061333b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a999061333b565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b505050600284015460039094015492936001600160a01b0390811693908116925060ff600160a01b820481169250600160a81b9091041687565b6000610b2b60085490565b8210610b8e5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161081e565b60088281548110610baf57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161081e565b60006001600160a01b038216610ca35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161081e565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610ce95760405162461bcd60e51b815260040161081e90613202565b610cf36000611f91565b565b336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b031614610d605760405162461bcd60e51b815260206004820152601260248201527118d85b1b195c881a5cc81b9bc819da5d995960721b604482015260640161081e565b336000908152600d6020526040902054600260ff90911610610dbe5760405162461bcd60e51b815260206004820152601760248201527618d85b1b195c881a5cc8185b1c9958591e48189d5e5959604a1b604482015260640161081e565b6000610dca8383611041565b6000818152600b6020526040902060030154909150600160a01b900460ff1615610e275760405162461bcd60e51b815260206004820152600e60248201526d1d1bdad95b881a5cc8189d5e595960921b604482015260640161081e565b6402540be400341015610e3957600080fd5b6040518060e0016040528084600f0b815260200183600f0b8152602001604051806020016040528060008152508152602001610e723390565b6001600160a01b0316815260006020808301829052600160408085018290526060909401839052858352600b825291839020845185830151600f90810b6001600160801b03908116600160801b029290910b16178155928401518051610edf9385019291909101906127c2565b5060608201516002820180546001600160a01b0319166001600160a01b0392831617905560808301516003909201805460a085015160c090950151939092166001600160a81b031990921691909117600160a01b931515939093029290921760ff60a81b1916600160a81b91151591909102179055336000818152600e6020908152604080832080546001818101835591855283852001869055938352600d90915281208054909190610f9690849060ff166132a0565b92506101000a81548160ff021916908360ff1602179055506402540be400341115610ff857336108fc610fce6402540be400346132f8565b6040518115909202916000818181858888f19350505050158015610ff6573d6000803e3d6000fd5b505b60408051600f85810b825284900b6020820152338183015290517fe20b07b22286906698dfaed9341c2187f29ec7e118f5283cd0b81d3796fc0c179181900360600190a1505050565b6001600160801b03166fffffffffffffffffffffffffffffffff1960809290921b919091161790565b6060600080600080600061107e8888611041565b6000818152600b60209081526040808320815160e0810183528154600f81810b810b810b8352600160801b909104810b810b900b93810193909352600181018054959650939492939092918401916110d59061333b565b80601f01602080910402602001604051908101604052809291908181526020018280546111019061333b565b801561114e5780601f106111235761010080835404028352916020019161114e565b820191906000526020600020905b81548152906001019060200180831161113157829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260039092015491821660408083019190915260ff600160a01b840481161515606080850191909152600160a81b909404161515608092830152830151918301519083015160a084015160c090940151929d919c509a509198509650945050505050565b6060600180546106f59061333b565b6001600160a01b0382163314156112365760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161081e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b03161461130d5760405162461bcd60e51b815260206004820152601260248201527118d85b1b195c881a5cc81b9bc819da5d995960721b604482015260640161081e565b60006113198484611041565b6000818152600b60205260409020600201549091506001600160a01b031633146113855760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206469646e2774206275796564207468697320746f6b656e0000604482015260640161081e565b6000818152600b6020526040902060030154600160a81b900460ff16156113df5760405162461bcd60e51b815260206004820152600e60248201526d1d1bdad95b881a5cc819da5d995960921b604482015260640161081e565b6000818152600b602090815260408083206003018054600161ff0160a01b0319166001600160a01b038716908117600160a81b179091558352600c909152902081905561142c8282611fe3565b60408051600f86810b825285900b60208201526001600160a01b038416918101919091527f315581f8fced1d4d8d321a598f896b9f857c52dfefae7188fbfde64900d62d9b906060015b60405180910390a150505050565b61148e3383611cef565b6114aa5760405162461bcd60e51b815260040161081e90613237565b6114b684848484612001565b50505050565b6001600160a01b0381166000908152600c6020908152604080832054808452600b8352818420825160e0810184528154600f81810b810b810b8352600160801b909104810b810b900b9481019490945260018101805486956060958795869586959194869493919291840191906115329061333b565b80601f016020809104026020016040519081016040528092919081815260200182805461155e9061333b565b80156115ab5780601f10611580576101008083540402835291602001916115ab565b820191906000526020600020905b81548152906001019060200180831161158e57829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260039093015490811660408084019190915260ff600160a01b830481161515606080860191909152600160a81b909304161515608090930192909252835192840151918401519084015160a085015160c090950151939e929d50909b50995091975095509350505050565b6000818152600b6020526040902060030154606090600160a01b900460ff1661168e5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08189d5e595960ba1b604482015260640161081e565b608082901c8260006116a08383611932565b6040516020016116b09190612e24565b60408051808303601f190181529181526000878152600b6020522060030154909150606090600160a81b900460ff16156117a4576000868152600b602052604090206001018054606091906117049061333b565b15159050611746575060408051808201909152601981527f3c6469763e6c6f6f746073206275696c6465723c2f6469763e00000000000000602082015261177a565b6000878152600b60209081526040918290209151611768926001019101612d18565b60405160208183030381529060405290505b808360405160200161178d929190612c02565b604051602081830303815290604052915050611881565b6117ac612846565b604051641e3234bb1f60d91b60208201526531313131313160d01b6025820152651e17b234bb1f60d11b602b82015260310160408051808303601f1901815291815290825251611800908490602001612cdb565b60408051601f1981840301815291815260208381019283528151641e3234bb1f60d91b818301526519191919191960d11b6025820152651e17b234bb1f60d11b602b820152825160118183030181526031909101835284830181905284519351925161186e94939201612c31565b6040516020818303038152906040529150505b6000816040516020016118949190612e6b565b60405160208183030381529060405290506118ae81612034565b6040516020016118be9190612ddf565b60405160208183030381529060405295505050505050919050565b600a546001600160a01b031633146119035760405162461bcd60e51b815260040161081e90613202565b60405133904780156108fc02916000818181858888f1935050505015801561192f573d6000803e3d6000fd5b50565b60606000604051806020016040528060008152509050600084600f0b131561196e57506040805180820190915260018152604560f81b60208201525b600084600f0b121561199457506040805180820190915260018152605760f81b60208201525b6060600085600f0b126119b4576119ad85600f0b6121a8565b90506119c6565b6119c385600f0b6000036121a8565b90505b60408051602081019091526000808252600f86900b13156119fb57506040805180820190915260018152602760f91b60208201525b600085600f0b1215611a2157506040805180820190915260018152605360f81b60208201525b6060600086600f0b12611a4157611a3a86600f0b6121a8565b9050611a53565b611a5086600f0b6000036121a8565b90505b83838383604051602001611a6a9493929190612c74565b60405160208183030381529060405294505050505092915050565b6000611a918484611041565b905033611a9d82610bc1565b6001600160a01b031614611af35760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e206973206e6f742062656c6f6e6720746f2063616c6c6572000000604482015260640161081e565b610100825110611b3a5760405162461bcd60e51b8152602060048201526012602482015271736c6f67616e20697320746f6f206c6f6e6760701b604482015260640161081e565b6000818152600b602090815260409091208351611b5f926001909201918501906127c2565b507f33aa80b38af4e0a1e2607b5743673d59a16ae46aecc240c828d6e71bddaf676284848460405161147693929190613092565b600a546001600160a01b03163314611bbd5760405162461bcd60e51b815260040161081e90613202565b6001600160a01b038116611c225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161081e565b61192f81611f91565b3b151590565b60006001600160e01b031982166380ac58cd60e01b1480611c6257506001600160e01b03198216635b5e139f60e01b145b806106e057506301ffc9a760e01b6001600160e01b03198316146106e0565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611cb682610bc1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611d685760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161081e565b6000611d7383610bc1565b9050806001600160a01b0316846001600160a01b03161480611dae5750836001600160a01b0316611da3846107a9565b6001600160a01b0316145b80611dde57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611df982610bc1565b6001600160a01b031614611e615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161081e565b6001600160a01b038216611ec35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161081e565b611ece8383836122c2565b611ed9600082611c81565b6001600160a01b0383166000908152600360205260408120805460019290611f029084906132f8565b90915550506001600160a01b0382166000908152600360205260408120805460019290611f30908490613288565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611ffd82826040518060200160405280600081525061237a565b5050565b61200c848484611de6565b612018848484846123ad565b6114b65760405162461bcd60e51b815260040161081e906131b0565b606081516000141561205457505060408051602081019091526000815290565b60006040518060600160405280604081526020016133fe60409139905060006003845160026120839190613288565b61208d91906132c5565b6120989060046132d9565b905060006120a7826020613288565b67ffffffffffffffff8111156120cd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120f7576020820181803683370190505b509050818152600183018586518101602084015b81831015612163576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161210b565b60038951066001811461217d576002811461218e5761219a565b613d3d60f01b60011983015261219a565b603d60f81b6000198301525b509398975050505050505050565b6060816121cc5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156121f657806121e081613376565b91506121ef9050600a836132c5565b91506121d0565b60008167ffffffffffffffff81111561221f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612249576020820181803683370190505b5090505b8415611dde5761225e6001836132f8565b915061226b600a86613391565b612276906030613288565b60f81b81838151811061229957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506122bb600a866132c5565b945061224d565b6001600160a01b03831661231d5761231881600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612340565b816001600160a01b0316836001600160a01b0316146123405761234083826124ba565b6001600160a01b0382166123575761095481612557565b826001600160a01b0316826001600160a01b031614610954576109548282612630565b6123848383612674565b61239160008484846123ad565b6109545760405162461bcd60e51b815260040161081e906131b0565b60006001600160a01b0384163b156124af57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906123f1903390899088908890600401613055565b602060405180830381600087803b15801561240b57600080fd5b505af192505050801561243b575060408051601f3d908101601f1916820190925261243891810190612aac565b60015b612495573d808015612469576040519150601f19603f3d011682016040523d82523d6000602084013e61246e565b606091505b50805161248d5760405162461bcd60e51b815260040161081e906131b0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611dde565b506001949350505050565b600060016124c784610c38565b6124d191906132f8565b600083815260076020526040902054909150808214612524576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612569906001906132f8565b6000838152600960205260408120546008805493945090928490811061259f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106125ce57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061261457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061263b83610c38565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166126ca5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161081e565b6000818152600260205260409020546001600160a01b03161561272f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161081e565b61273b600083836122c2565b6001600160a01b0382166000908152600360205260408120805460019290612764908490613288565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546127ce9061333b565b90600052602060002090601f0160209004810192826127f05760008555612836565b82601f1061280957805160ff1916838001178555612836565b82800160010185558215612836579182015b8281111561283657825182559160200191906001019061281b565b5061284292915061286d565b5090565b60405180606001604052806003905b60608152602001906001900390816128555790505090565b5b80821115612842576000815560010161286e565b600067ffffffffffffffff8084111561289d5761289d6133d1565b604051601f8501601f19908116603f011681019082821181831017156128c5576128c56133d1565b816040528093508581528686860111156128de57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461290f57600080fd5b919050565b8035600f81900b811461290f57600080fd5b600060208284031215612937578081fd5b612940826128f8565b9392505050565b60008060408385031215612959578081fd5b612962836128f8565b9150612970602084016128f8565b90509250929050565b60008060006060848603121561298d578081fd5b612996846128f8565b92506129a4602085016128f8565b9150604084013590509250925092565b600080600080608085870312156129c9578081fd5b6129d2856128f8565b93506129e0602086016128f8565b925060408501359150606085013567ffffffffffffffff811115612a02578182fd5b8501601f81018713612a12578182fd5b612a2187823560208401612882565b91505092959194509250565b60008060408385031215612a3f578182fd5b612a48836128f8565b915060208301358015158114612a5c578182fd5b809150509250929050565b60008060408385031215612a79578182fd5b612a82836128f8565b946020939093013593505050565b600060208284031215612aa1578081fd5b8135612940816133e7565b600060208284031215612abd578081fd5b8151612940816133e7565b60008060408385031215612ada578182fd5b612ae383612914565b915061297060208401612914565b600080600060608486031215612b05578283fd5b612b0e84612914565b9250612b1c60208501612914565b9150612b2a604085016128f8565b90509250925092565b600080600060608486031215612b47578283fd5b612b5084612914565b9250612b5e60208501612914565b9150604084013567ffffffffffffffff811115612b79578182fd5b8401601f81018613612b89578182fd5b612b9886823560208401612882565b9150509250925092565b600060208284031215612bb3578081fd5b5035919050565b60008151808452612bd281602086016020860161330f565b601f01601f19169290920160200192915050565b60008151612bf881856020860161330f565b9290920192915050565b60008351612c1481846020880161330f565b835190830190612c2881836020880161330f565b01949350505050565b60008451612c4381846020890161330f565b845190830190612c5781836020890161330f565b8451910190612c6a81836020880161330f565b0195945050505050565b60008551612c86818460208a0161330f565b855190830190612c9a818360208a0161330f565b600b60fa1b91019081528451612cb781600184016020890161330f565b8451910190612ccd81600184016020880161330f565b016001019695505050505050565b641e3234bb1f60d91b815260008251612cfb81600585016020870161330f565b651e17b234bb1f60d11b6005939091019283015250600b01919050565b641e3234bb1f60d91b81526000600581845483600182811c915080831680612d4157607f831692505b6020808410821415612d6157634e487b7160e01b88526022600452602488fd5b818015612d755760018114612d8a57612dba565b60ff1986168a890152848a0188019650612dba565b60008b815260209020895b86811015612db05781548c82018b0152908501908301612d95565b505087858b010196505b505050505050612dd681651e17b234bb1f60d11b815260060190565b95945050505050565b7f646174613a6170706c69636174696f6e2f7376673b6261736536342c00000000815260008251612e1781601c85016020870161330f565b91909101601c0192915050565b6d078c8d2ec7c98dedee8d8c2dcc8560931b815260008251612e4d81600e85016020870161330f565b66149e17b234bb1f60c91b600e939091019283015250601501919050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f73766722207072657365727665417370656374526174696f3d22784d6960208201527f6e594d696e206d656574222076696577426f783d22302030203335302033353060408201527f223e3c726563742077696474683d223130302522206865696768743d2231303060608201527f25222066696c6c3d22626c61636b22202f3e3c666f726569676e4f626a65637460808201527f2077696474683d2233353022206865696768743d223335302220783d2230222060a08201527f793d2230223e3c626f647920786d6c6e733d22687474703a2f2f7777772e773360c08201527f2e6f72672f313939392f7868746d6c223e3c7374796c653e2e62617365207b2060e08201527f636f6c6f723a2077686974653b20666f6e742d66616d696c793a2073657269666101008201527f3b20666f6e742d73697a653a20313470783b206d617267696e3a20313070783b6101208201527f207d3c2f7374796c653e3c64697620636c6173733d2262617365223e00000000610140820152600061294061302061015c840185612be6565b7f3c2f6469763e3c2f626f64793e3c2f666f726569676e4f626a6563743e3c2f738152623b339f60e91b602082015260230190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061308890830184612bba565b9695505050505050565b83600f0b815282600f0b6020820152606060408201526000612dd66060830184612bba565b87600f0b815286600f0b602082015260e0604082015260006130dc60e0830188612bba565b6001600160a01b03968716606084015294909516608082015291151560a0830152151560c090910152949350505050565b86600f0b815285600f0b602082015260c06040820152600061313260c0830187612bba565b6001600160a01b03959095166060830152509115156080830152151560a0909101529392505050565b6020815260006129406020830184612bba565b60a08152600061318160a0830188612bba565b6001600160a01b0396871660208401529490951660408201529115156060830152151560809091015292915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561329b5761329b6133a5565b500190565b600060ff821660ff84168060ff038211156132bd576132bd6133a5565b019392505050565b6000826132d4576132d46133bb565b500490565b60008160001904831182151516156132f3576132f36133a5565b500290565b60008282101561330a5761330a6133a5565b500390565b60005b8381101561332a578181015183820152602001613312565b838111156114b65750506000910152565b600181811c9082168061334f57607f821691505b6020821081141561337057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561338a5761338a6133a5565b5060010190565b6000826133a0576133a06133bb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461192f57600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212209b6c14877412a1889f8f03dd916a6203d6a7fa3ff5590865d16f8d09f0c8c67364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/Land.sol:Land",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/Land.sol:Land",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/Land.sol:Land",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/Land.sol:Land",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/Land.sol:Land",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/Land.sol:Land",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/Land.sol:Land",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/Land.sol:Land",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/Land.sol:Land",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/Land.sol:Land",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Land.sol:Land",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2162,
        "contract": "contracts/Land.sol:Land",
        "label": "tokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Token)2150_storage)"
      },
      {
        "astId": 2166,
        "contract": "contracts/Land.sol:Land",
        "label": "gived",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2170,
        "contract": "contracts/Land.sol:Land",
        "label": "buyCount",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 2175,
        "contract": "contracts/Land.sol:Land",
        "label": "buyTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Token)2150_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Land.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)2150_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Token)2150_storage": {
        "encoding": "inplace",
        "label": "struct Land.Token",
        "members": [
          {
            "astId": 2137,
            "contract": "contracts/Land.sol:Land",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 2139,
            "contract": "contracts/Land.sol:Land",
            "label": "y",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 2141,
            "contract": "contracts/Land.sol:Land",
            "label": "slogan",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2143,
            "contract": "contracts/Land.sol:Land",
            "label": "buyedAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2145,
            "contract": "contracts/Land.sol:Land",
            "label": "givedAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2147,
            "contract": "contracts/Land.sol:Land",
            "label": "isBuyed",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2149,
            "contract": "contracts/Land.sol:Land",
            "label": "isGived",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}