{
  "address": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyedAddress",
          "type": "address"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        }
      ],
      "name": "GiveTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        }
      ],
      "name": "SetSlogan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x1",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y1",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "x2",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y2",
          "type": "int128"
        }
      ],
      "name": "buy2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x1",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y1",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "givedAddress1",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "x2",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y2",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "givedAddress2",
          "type": "address"
        }
      ],
      "name": "buy2AndGiveTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        }
      ],
      "name": "buyAndGiveTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyLandCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyedAddress",
          "type": "address"
        }
      ],
      "name": "getBuyLands",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "x",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "y",
              "type": "int128"
            },
            {
              "internalType": "string",
              "name": "slogan",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "buyedAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "givedAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBuyed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGived",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootLand.Land[]",
          "name": "_buyLands",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCoordinates",
      "outputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "getCoordinatesString",
      "outputs": [
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "givedAddress",
          "type": "address"
        }
      ],
      "name": "giveTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_givedAddress",
          "type": "address"
        }
      ],
      "name": "givedLand",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isGived",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "int128",
              "name": "x",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "y",
              "type": "int128"
            },
            {
              "internalType": "string",
              "name": "slogan",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "buyedAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "givedAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBuyed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGived",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootLand.Land",
          "name": "_land",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "_x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "_y",
          "type": "int128"
        }
      ],
      "name": "land",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "x",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "y",
              "type": "int128"
            },
            {
              "internalType": "string",
              "name": "slogan",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "buyedAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "givedAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBuyed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isGived",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootLand.Land",
          "name": "_land",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "x",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "y",
          "type": "int128"
        },
        {
          "internalType": "string",
          "name": "slogan",
          "type": "string"
        }
      ],
      "name": "setSlogan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
  "receipt": {
    "to": null,
    "from": "0x26Ac833AEde4ee4b330E7A67b57F4eaB40B65E5c",
    "contractAddress": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
    "transactionIndex": 15,
    "gasUsed": "3631527",
    "logsBloom": "0x
    "blockHash": "0xd4a94d42d7959bc88a697aabffbff16093f46acc80962a5467fe804e44204099",
    "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 11433882,
        "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
        "address": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000026ac833aede4ee4b330e7a67b57f4eab40b65e5c"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xd4a94d42d7959bc88a697aabffbff16093f46acc80962a5467fe804e44204099"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11433882,
        "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
        "address": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000026ac833aede4ee4b330e7a67b57f4eab40b65e5c",
          "0x000000000000000000000000ace84e2a50efcf847c3a1d21018cecc2075e4a78"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xd4a94d42d7959bc88a697aabffbff16093f46acc80962a5467fe804e44204099"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11433882,
        "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
        "address": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ace84e2a50efcf847c3a1d21018cecc2075e4a78",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xd4a94d42d7959bc88a697aabffbff16093f46acc80962a5467fe804e44204099"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11433882,
        "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
        "address": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
        "topics": [
          "0xe20b07b22286906698dfaed9341c2187f29ec7e118f5283cd0b81d3796fc0c17"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 14,
        "blockHash": "0xd4a94d42d7959bc88a697aabffbff16093f46acc80962a5467fe804e44204099"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 11433882,
        "transactionHash": "0x1aaaef6c5e0ed486a1fefe70034f3cf292edaf617d21ccb41ef3ae49af7f560d",
        "address": "0xBA1be08989b98E7334C2d6c66b7bad2cbB18A9c1",
        "topics": [
          "0x315581f8fced1d4d8d321a598f896b9f857c52dfefae7188fbfde64900d62d9b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ace84e2a50efcf847c3a1d21018cecc2075e4a78",
        "logIndex": 15,
        "blockHash": "0xd4a94d42d7959bc88a697aabffbff16093f46acc80962a5467fe804e44204099"
      }
    ],
    "blockNumber": 11433882,
    "cumulativeGasUsed": "6707140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAce84e2A50EfcF847c3a1d21018cecc2075E4a78"
  ],
  "solcInputHash": "79490ca1df29d04bd36eb36ea9e752f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"}],\"name\":\"GiveTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"}],\"name\":\"SetSlogan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x1\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y1\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"x2\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y2\",\"type\":\"int128\"}],\"name\":\"buy2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x1\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y1\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"givedAddress1\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"x2\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y2\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"givedAddress2\",\"type\":\"address\"}],\"name\":\"buy2AndGiveTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"}],\"name\":\"buyAndGiveTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLandCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyedAddress\",\"type\":\"address\"}],\"name\":\"getBuyLands\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"}],\"internalType\":\"struct ILootLand.Land[]\",\"name\":\"_buyLands\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCoordinates\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"getCoordinatesString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"}],\"name\":\"giveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_givedAddress\",\"type\":\"address\"}],\"name\":\"givedLand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"}],\"internalType\":\"struct ILootLand.Land\",\"name\":\"_land\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"_x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"_y\",\"type\":\"int128\"}],\"name\":\"land\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"givedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuyed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGived\",\"type\":\"bool\"}],\"internalType\":\"struct ILootLand.Land\",\"name\":\"_land\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"y\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"slogan\",\"type\":\"string\"}],\"name\":\"setSlogan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LootLand.sol\":\"LootLand\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":175},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/LootLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/ILootLand.sol\\\";\\n\\ncontract LootLand is ILootLand, ERC721Enumerable, Ownable {\\n  // tokenid => TOKEN\\n  mapping(uint256 => Land) private _lands;\\n\\n  // givedAddress => tokenId\\n  mapping(address => uint256) private _gived;\\n\\n  // buyedAddress => buy land tokenids\\n  mapping(address => uint256[]) private _buyLandTokenIds;\\n\\n  // buyedAddress => buy count\\n  mapping(address => uint8) public override buyLandCount;\\n\\n  uint256 public constant PRICE = 4669201609102000 wei;\\n\\n  modifier hasGived() {\\n    require(\\n      _lands[_gived[_msgSender()]].isGived &&\\n        _lands[_gived[_msgSender()]].givedAddress == _msgSender(),\\n      \\\"caller is no gived\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor(address _owner) ERC721(\\\"Land\\\", \\\"LAND\\\") Ownable() {\\n    // TODO owner \\u95ee\\u9898\\n    transferOwnership(_owner);\\n    uint256 tokenId = getTokenId(0, 0);\\n    _lands[tokenId] = Land(0, 0, \\\"\\\", address(0), _owner, true, true);\\n    _gived[_owner] = tokenId;\\n    _safeMint(_owner, tokenId);\\n\\n    emit Buy(0, 0, address(0));\\n    emit GiveTo(0, 0, _owner);\\n  }\\n\\n  function buy(int128 x, int128 y) external payable override hasGived {\\n    _buy(x, y);\\n  }\\n\\n  function buy2(\\n    int128 x1,\\n    int128 y1,\\n    int128 x2,\\n    int128 y2\\n  ) external payable override hasGived {\\n    _buy2(x1, y1, x2, y2);\\n  }\\n\\n  function giveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) external override hasGived {\\n    _giveTo(x, y, givedAddress);\\n  }\\n\\n  function buyAndGiveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) external payable override hasGived {\\n    _buy(x, y);\\n    _giveTo(x, y, givedAddress);\\n  }\\n\\n  function buy2AndGiveTo(\\n    int128 x1,\\n    int128 y1,\\n    address givedAddress1,\\n    int128 x2,\\n    int128 y2,\\n    address givedAddress2\\n  ) external payable override hasGived {\\n    _buy2(x1, y1, x2, y2);\\n    _giveTo(x1, y1, givedAddress1);\\n    _giveTo(x2, y2, givedAddress2);\\n  }\\n\\n  function setSlogan(\\n    int128 x,\\n    int128 y,\\n    string memory slogan\\n  ) external override {\\n    uint256 tokenId = getTokenId(x, y);\\n\\n    require(ownerOf(tokenId) == _msgSender(), \\\"token is not belong to caller\\\");\\n    require(bytes(slogan).length < 256, \\\"slogan is too long\\\");\\n\\n    _lands[tokenId].slogan = slogan;\\n\\n    emit SetSlogan(x, y, slogan);\\n  }\\n\\n  function getEth() external override onlyOwner {\\n    payable(_msgSender()).transfer(address(this).balance);\\n  }\\n\\n  function land(int128 _x, int128 _y)\\n    external\\n    view\\n    override\\n    returns (Land memory _land)\\n  {\\n    uint256 tokenId = getTokenId(_x, _y);\\n    Land memory queryLand = _lands[tokenId];\\n    if (queryLand.isBuyed) {\\n      _land = queryLand;\\n    } else {\\n      _land = Land(_x, _y, \\\"\\\", address(0), address(0), false, false);\\n    }\\n  }\\n\\n  function givedLand(address _givedAddress)\\n    external\\n    view\\n    override\\n    returns (bool isGived, Land memory _land)\\n  {\\n    uint256 tokenId = _gived[_givedAddress];\\n    Land memory queryLand = _lands[tokenId];\\n    if (queryLand.givedAddress == _givedAddress) {\\n      isGived = true;\\n      _land = queryLand;\\n    } else {\\n      isGived = false;\\n      _land = Land(0, 0, \\\"\\\", address(0), address(0), false, false);\\n    }\\n  }\\n\\n  function getBuyLands(address _buyedAddress)\\n    external\\n    view\\n    override\\n    returns (Land[] memory _buyLands)\\n  {\\n    uint256[] memory tokenIds = _buyLandTokenIds[_buyedAddress];\\n    _buyLands = new Land[](tokenIds.length);\\n    for (uint8 index = 0; index < tokenIds.length; index++) {\\n      _buyLands[index] = _lands[tokenIds[index]];\\n    }\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory result)\\n  {\\n    (int128 x, int128 y) = getCoordinates(tokenId);\\n\\n    string memory _slogan;\\n    if (!_lands[tokenId].isBuyed) {\\n      _slogan = \\\"Waiting for you\\\";\\n    } else {\\n      _slogan = \\\"Inviting the talented you to become a lootverse builder for the next 10 years, And For you on my side bought:\\\";\\n      if (_lands[tokenId].isGived && bytes(_lands[tokenId].slogan).length > 0) {\\n        _slogan = _lands[tokenId].slogan;\\n      }\\n    }\\n\\n    string memory _sloganStr = string(\\n      abi.encodePacked('<div class=\\\"sologan\\\">', _slogan, \\\"</div>\\\")\\n    );\\n\\n    string memory _landStr = string(\\n      abi.encodePacked(\\n        '<div class=\\\"land\\\">Lootland (',\\n        getCoordinatesString(x, y),\\n        \\\")</div>\\\"\\n      )\\n    );\\n\\n    string memory _notesStr = string(\\n      abi.encodePacked(\\n        '<div class=\\\"notes\\\">',\\n        \\\"<div>Notes:</div>\\\",\\n        \\\"<div>- Lootland is created for builders</div>\\\",\\n        \\\"<div>- Only invited to be a builder</div>\\\",\\n        \\\"<div>- Each builder can only buy two lands</div>\\\",\\n        \\\"<div>- Only one person can be invited to each land</div>\\\",\\n        \\\"<div>- Each person can only accept an invitation once</div>\\\",\\n        \\\"<div>- Each land is 100*100 square meters</div>\\\",\\n        \\\"</div>\\\"\\n      )\\n    );\\n\\n    string memory svgStr = string(\\n      abi.encodePacked(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 360 360\\\"><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#0F4C81\\\" /><foreignObject width=\\\"360\\\" height=\\\"360\\\" x=\\\"0\\\" y=\\\"0\\\"><body xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><style>.base {font-family:sans-serif;margin:10px;}.sologan { color: #F0EDE5; font-size: 18px;margin-top:30px;height: 90px; }.land { color: #C0D725; font-size: 24px; height: 60px; }.notes { color: #A5B8D0; font-size: 14px; }</style><div class=\\\"base\\\">',\\n        _sloganStr,\\n        _landStr,\\n        _notesStr,\\n        \\\"</div></body></foreignObject></svg>\\\"\\n      )\\n    );\\n\\n    result = string(\\n      abi.encodePacked(\\n        \\\"data:application/svg;base64,\\\",\\n        Base64.encode(bytes(svgStr))\\n      )\\n    );\\n  }\\n\\n  function getTokenId(int128 x, int128 y)\\n    public\\n    pure\\n    override\\n    returns (uint256 tokenId)\\n  {\\n    bytes32 xx = bytes16(uint128(x));\\n    bytes32 yy = bytes16(uint128(y));\\n    tokenId = uint256(xx | (yy >> 128));\\n  }\\n\\n  function getCoordinates(uint256 tokenId)\\n    public\\n    pure\\n    override\\n    returns (int128 x, int128 y)\\n  {\\n    x = int128(uint128(tokenId >> 128));\\n    y = int128(uint128(tokenId));\\n  }\\n\\n  function getCoordinatesString(int128 x, int128 y)\\n    public\\n    pure\\n    override\\n    returns (string memory data)\\n  {\\n    string memory xPrefix = \\\"\\\";\\n    if (x > 0) {\\n      xPrefix = \\\"E\\\";\\n    }\\n    if (x < 0) {\\n      xPrefix = \\\"W\\\";\\n    }\\n\\n    string memory xStr;\\n    if (x >= 0) {\\n      xStr = Strings.toString(uint256(int256(x)));\\n    } else {\\n      unchecked {\\n        xStr = Strings.toString(uint256(-int256(x)));\\n      }\\n    }\\n\\n    string memory yPrefix = \\\"\\\";\\n    if (y > 0) {\\n      yPrefix = \\\"N\\\";\\n    }\\n    if (y < 0) {\\n      yPrefix = \\\"S\\\";\\n    }\\n\\n    string memory yStr;\\n    if (y >= 0) {\\n      yStr = Strings.toString(uint256(int256(y)));\\n    } else {\\n      unchecked {\\n        yStr = Strings.toString(uint256(-int256(y)));\\n      }\\n    }\\n\\n    data = string(abi.encodePacked(xPrefix, xStr, \\\",\\\", yPrefix, yStr));\\n  }\\n\\n  function _giveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) private {\\n    uint256 tokenId = getTokenId(x, y);\\n\\n    require(\\n      _lands[tokenId].buyedAddress == _msgSender(),\\n      \\\"caller didn't buyed this token\\\"\\n    );\\n    require(!_lands[tokenId].isGived, \\\"token is gived\\\");\\n\\n    require(\\n      _lands[_gived[givedAddress]].givedAddress != givedAddress,\\n      \\\"givedAddress have gived land\\\"\\n    );\\n\\n    _lands[tokenId].givedAddress = givedAddress;\\n    _lands[tokenId].isGived = true;\\n    _gived[givedAddress] = tokenId;\\n\\n    _safeMint(givedAddress, tokenId);\\n\\n    emit GiveTo(x, y, givedAddress);\\n  }\\n\\n  function _buy2(\\n    int128 x1,\\n    int128 y1,\\n    int128 x2,\\n    int128 y2\\n  ) private {\\n    require(msg.value >= PRICE * 2, \\\"eth too less\\\");\\n\\n    _buyWithoutEth(x1, y1);\\n    _buyWithoutEth(x2, y2);\\n\\n    if (msg.value > PRICE * 2) {\\n      payable(_msgSender()).transfer(msg.value - PRICE * 2);\\n    }\\n  }\\n\\n  function _buy(int128 x, int128 y) private {\\n    require(msg.value >= PRICE, \\\"eth too less\\\");\\n\\n    _buyWithoutEth(x, y);\\n\\n    if (msg.value > PRICE) {\\n      payable(_msgSender()).transfer(msg.value - PRICE);\\n    }\\n  }\\n\\n  function _buyWithoutEth(int128 x, int128 y) private {\\n    require(buyLandCount[_msgSender()] < 2, \\\"caller is already buyed\\\");\\n\\n    uint256 tokenId = getTokenId(x, y);\\n\\n    require(!_lands[tokenId].isBuyed, \\\"land is buyed\\\");\\n\\n    _lands[tokenId] = Land(x, y, \\\"\\\", _msgSender(), address(0), true, false);\\n\\n    _buyLandTokenIds[_msgSender()].push(tokenId);\\n    buyLandCount[_msgSender()] += 1;\\n\\n    emit Buy(x, y, _msgSender());\\n  }\\n}\\n\",\"keccak256\":\"0x335cc239bbfd99d03c9e031e270118aa4e2126ab1b8f8ca2a1af660e4c5633bf\",\"license\":\"MIT\"},\"contracts/interfaces/ILootLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILootLand {\\n  struct Land {\\n    int128 x;\\n    int128 y;\\n    string slogan;\\n    address buyedAddress;\\n    address givedAddress;\\n    bool isBuyed;\\n    bool isGived;\\n  }\\n\\n  event Buy(int128 x, int128 y, address buyedAddress);\\n  event GiveTo(int128 x, int128 y, address givedAddress);\\n  event SetSlogan(int128 x, int128 y, string slogan);\\n\\n  function buyLandCount(address buyedAddress)\\n    external\\n    view\\n    returns (uint8 count);\\n\\n  function buy(int128 x, int128 y) external payable;\\n\\n  function buy2(\\n    int128 x1,\\n    int128 y1,\\n    int128 x2,\\n    int128 y2\\n  ) external payable;\\n\\n  function giveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) external;\\n\\n  function buyAndGiveTo(\\n    int128 x,\\n    int128 y,\\n    address givedAddress\\n  ) external payable;\\n\\n  function buy2AndGiveTo(\\n    int128 x1,\\n    int128 y1,\\n    address givedAddress1,\\n    int128 x2,\\n    int128 y2,\\n    address givedAddress2\\n  ) external payable;\\n\\n  function setSlogan(\\n    int128 x,\\n    int128 y,\\n    string memory slogan\\n  ) external;\\n\\n  function getEth() external;\\n\\n  function land(int128 _x, int128 _y) external view returns (Land memory token);\\n\\n  function givedLand(address _givedAddress)\\n    external\\n    view\\n    returns (bool isGived, Land memory token);\\n\\n  function getBuyLands(address _buyedAddress)\\n    external\\n    view\\n    returns (Land[] memory _token);\\n\\n  function getTokenId(int128 x, int128 y)\\n    external\\n    pure\\n    returns (uint256 tokenId);\\n\\n  function getCoordinates(uint256 tokenId)\\n    external\\n    pure\\n    returns (int128 x, int128 y);\\n\\n  function getCoordinatesString(int128 x, int128 y)\\n    external\\n    pure\\n    returns (string memory data);\\n}\\n\",\"keccak256\":\"0x050bb4c5d6e5579b6799a208be977b8c579c5669c5569689a4bb7186668642ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80638b9c06b81161010d578063be29010d116100a0578063cf2650251161006f578063cf265025146105e6578063d019b71314610606578063e985e9c514610626578063f2fde38b1461066f578063fd60b5c71461068f57600080fd5b8063be29010d14610541578063c87b56dd1461056f578063cb05b93e1461058f578063cb1d3151146105a457600080fd5b80639db357a2116100dc5780639db357a2146104b4578063a22cb465146104e1578063b3271d6514610501578063b88d4fde1461052157600080fd5b80638b9c06b8146104395780638d859f3e146104665780638da5cb5b1461048157806395d89b411461049f57600080fd5b80632f745c59116101905780636352211e1161015f5780636352211e146103b157806370a08231146103d1578063715018a6146103f15780637a98b16b146104065780637e5a6be81461041957600080fd5b80632f745c591461033e57806342842e0e1461035e5780634df619bb1461037e5780634f6ccce71461039157600080fd5b80630bf37818116101cc5780630bf37818146102af57806318160ddd146102ec57806323b872dd1461030b578063278a42591461032b57600080fd5b806301ffc9a7146101fe57806306fdde0314610233578063081812fc14610255578063095ea7b31461028d575b600080fd5b34801561020a57600080fd5b5061021e610219366004612f5e565b6106a2565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b506102486106cd565b60405161022a91906138cb565b34801561026157600080fd5b50610275610270366004613136565b61075f565b6040516001600160a01b03909116815260200161022a565b34801561029957600080fd5b506102ad6102a8366004612f35565b6107f9565b005b3480156102bb57600080fd5b506102d26102ca366004613136565b608081901c91565b60408051600f93840b81529190920b60208201520161022a565b3480156102f857600080fd5b506008545b60405190815260200161022a565b34801561031757600080fd5b506102ad610326366004612e47565b61090f565b6102ad610339366004612fbf565b610940565b34801561034a57600080fd5b506102fd610359366004612f35565b6109cd565b34801561036a57600080fd5b506102ad610379366004612e47565b610a63565b6102ad61038c366004613001565b610a7e565b34801561039d57600080fd5b506102fd6103ac366004613136565b610b20565b3480156103bd57600080fd5b506102756103cc366004613136565b610bc1565b3480156103dd57600080fd5b506102fd6103ec366004612df4565b610c38565b3480156103fd57600080fd5b506102ad610cbf565b6102ad610414366004612f96565b610cf5565b34801561042557600080fd5b506102fd610434366004612f96565b610d7b565b34801561044557600080fd5b50610459610454366004612f96565b610da4565b60405161022a91906139e2565b34801561047257600080fd5b506102fd6610969d374b92b081565b34801561048d57600080fd5b50600a546001600160a01b0316610275565b3480156104ab57600080fd5b50610248610f5a565b3480156104c057600080fd5b506104d46104cf366004612df4565b610f69565b60405161022a919061382a565b3480156104ed57600080fd5b506102ad6104fc366004612efb565b6111d4565b34801561050d57600080fd5b506102ad61051c366004612fbf565b611299565b34801561052d57600080fd5b506102ad61053c366004612e82565b611311565b34801561054d57600080fd5b5061056161055c366004612df4565b611349565b60405161022a92919061388b565b34801561057b57600080fd5b5061024861058a366004613136565b6114f2565b34801561059b57600080fd5b506102ad61171d565b3480156105b057600080fd5b506105d46105bf366004612df4565b600e6020526000908152604090205460ff1681565b60405160ff909116815260200161022a565b3480156105f257600080fd5b50610248610601366004612f96565b611776565b34801561061257600080fd5b506102ad6106213660046130c7565b6118c9565b34801561063257600080fd5b5061021e610641366004612e15565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561067b57600080fd5b506102ad61068a366004612df4565b6119e5565b6102ad61069d366004613074565b611a7d565b60006001600160e01b0319821663780e9d6360e01b14806106c757506106c782611b07565b92915050565b6060600080546106dc90613aa8565b80601f016020809104026020016040519081016040528092919081815260200182805461070890613aa8565b80156107555780601f1061072a57610100808354040283529160200191610755565b820191906000526020600020905b81548152906001019060200180831161073857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107dd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061080482610bc1565b9050806001600160a01b0316836001600160a01b031614156108725760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107d4565b336001600160a01b038216148061088e575061088e8133610641565b6109005760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107d4565b61090a8383611b57565b505050565b6109193382611bc5565b6109355760405162461bcd60e51b81526004016107d490613991565b61090a838383611cbc565b336000908152600c60209081526040808320548352600b909152902060030154600160a81b900460ff16801561099c5750336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b0316145b6109b85760405162461bcd60e51b81526004016107d4906138de565b6109c28383611e67565b61090a838383611f03565b60006109d883610c38565b8210610a3a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107d4565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61090a83838360405180602001604052806000815250611311565b336000908152600c60209081526040808320548352600b909152902060030154600160a81b900460ff168015610ada5750336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b0316145b610af65760405162461bcd60e51b81526004016107d4906138de565b610b02868685856120eb565b610b0d868686611f03565b610b18838383611f03565b505050505050565b6000610b2b60085490565b8210610b8e5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107d4565b60088281548110610baf57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106c75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107d4565b60006001600160a01b038216610ca35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107d4565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610ce95760405162461bcd60e51b81526004016107d49061395c565b610cf360006121b7565b565b336000908152600c60209081526040808320548352600b909152902060030154600160a81b900460ff168015610d515750336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b0316145b610d6d5760405162461bcd60e51b81526004016107d4906138de565b610d778282611e67565b5050565b6001600160801b03166fffffffffffffffffffffffffffffffff1960809290921b919091161790565b610dac612c7a565b6000610db88484610d7b565b6000818152600b60209081526040808320815160e0810183528154600f81810b810b810b8352600160801b909104810b810b900b9381019390935260018101805495965093949293909291840191610e0f90613aa8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3b90613aa8565b8015610e885780601f10610e5d57610100808354040283529160200191610e88565b820191906000526020600020905b815481529060010190602001808311610e6b57829003601f168201915b505050918352505060028201546001600160a01b039081166020830152600390920154918216604082015260ff600160a01b8304811615156060830152600160a81b909204909116151560809091015260a081015190915015610eed57809250610f52565b6040518060e0016040528086600f0b815260200185600f0b815260200160405180602001604052806000815250815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581526020016000151581525092505b505092915050565b6060600180546106dc90613aa8565b6001600160a01b0381166000908152600d60209081526040808320805482518185028101850190935280835260609493830182828015610fc857602002820191906000526020600020905b815481526020019060010190808311610fb4575b50505050509050805167ffffffffffffffff811115610ff757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561103057816020015b61101d612c7a565b8152602001906001900390816110155790505b50915060005b81518160ff1610156111cd57600b6000838360ff168151811061106957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252818101929092526040908101600020815160e0810183528154600f81810b810b810b8352600160801b909104810b810b900b9381019390935260018101805491928401916110c490613aa8565b80601f01602080910402602001604051908101604052809291908181526020018280546110f090613aa8565b801561113d5780601f106111125761010080835404028352916020019161113d565b820191906000526020600020905b81548152906001019060200180831161112057829003601f168201915b505050918352505060028201546001600160a01b039081166020830152600390920154918216604082015260ff600160a01b8304811615156060830152600160a81b909204821615156080909101528451859184169081106111af57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806111c590613afe565b915050611036565b5050919050565b6001600160a01b03821633141561122d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107d4565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336000908152600c60209081526040808320548352600b909152902060030154600160a81b900460ff1680156112f55750336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b0316145b6109c25760405162461bcd60e51b81526004016107d4906138de565b61131b3383611bc5565b6113375760405162461bcd60e51b81526004016107d490613991565b61134384848484612209565b50505050565b6000611353612c7a565b6001600160a01b0383166000908152600c6020908152604080832054808452600b8352818420825160e0810184528154600f81810b810b810b8352600160801b909104810b810b900b94810194909452600181018054929594939192918401916113bc90613aa8565b80601f01602080910402602001604051908101604052809291908181526020018280546113e890613aa8565b80156114355780601f1061140a57610100808354040283529160200191611435565b820191906000526020600020905b81548152906001019060200180831161141857829003601f168201915b505050918352505060028201546001600160a01b039081166020830152600390920154808316604083015260ff600160a01b8204811615156060840152600160a81b90910416151560809182015282015191925090811690861614156114a157600193508092506114eb565b6040805160e081018252600080825260208083018290528351908101845281815292820192909252606081018290526080810182905260a0810182905260c0810182905290945092505b5050915091565b6000818152600b6020526040902060030154606090608083901c9083908390600160a01b900460ff1661154b575060408051808201909152600f81526e57616974696e6720666f7220796f7560881b602082015261164c565b6040518060a00160405280606d8152602001613bcb606d91396000868152600b6020526040902060030154909150600160a81b900460ff1680156115aa57506000858152600b6020526040812060010180546115a690613aa8565b9050115b1561164c576000858152600b6020526040902060010180546115cb90613aa8565b80601f01602080910402602001604051908101604052809291908181526020018280546115f790613aa8565b80156116445780601f1061161957610100808354040283529160200191611644565b820191906000526020600020905b81548152906001019060200180831161162757829003601f168201915b505050505090505b60008160405160200161165f919061379f565b6040516020818303038152906040529050600061167c8585611776565b60405160200161168c9190613749565b604051602081830303815290604052905060006040516020016116ae90613272565b604051602081830303815290604052905060008383836040516020016116d69392919061344d565b60405160208183030381529060405290506116f08161223c565b6040516020016117009190613704565b604051602081830303815290604052975050505050505050919050565b600a546001600160a01b031633146117475760405162461bcd60e51b81526004016107d49061395c565b60405133904780156108fc02916000818181858888f19350505050158015611773573d6000803e3d6000fd5b50565b60606000604051806020016040528060008152509050600084600f0b13156117b257506040805180820190915260018152604560f81b60208201525b600084600f0b12156117d857506040805180820190915260018152605760f81b60208201525b6060600085600f0b126117f8576117f185600f0b6123b0565b905061180a565b61180785600f0b6000036123b0565b90505b60408051602081019091526000808252600f86900b131561183f57506040805180820190915260018152602760f91b60208201525b600085600f0b121561186557506040805180820190915260018152605360f81b60208201525b6060600086600f0b126118855761187e86600f0b6123b0565b9050611897565b61189486600f0b6000036123b0565b90505b838383836040516020016118ae949392919061320b565b60405160208183030381529060405294505050505092915050565b60006118d58484610d7b565b9050336118e182610bc1565b6001600160a01b0316146119375760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e206973206e6f742062656c6f6e6720746f2063616c6c657200000060448201526064016107d4565b61010082511061197e5760405162461bcd60e51b8152602060048201526012602482015271736c6f67616e20697320746f6f206c6f6e6760701b60448201526064016107d4565b6000818152600b6020908152604090912083516119a392600190920191850190612cb7565b507f33aa80b38af4e0a1e2607b5743673d59a16ae46aecc240c828d6e71bddaf67628484846040516119d7939291906138a6565b60405180910390a150505050565b600a546001600160a01b03163314611a0f5760405162461bcd60e51b81526004016107d49061395c565b6001600160a01b038116611a745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d4565b611773816121b7565b336000908152600c60209081526040808320548352600b909152902060030154600160a81b900460ff168015611ad95750336000818152600c60209081526040808320548352600b9091529020600301546001600160a01b0316145b611af55760405162461bcd60e51b81526004016107d4906138de565b611343848484846120eb565b3b151590565b60006001600160e01b031982166380ac58cd60e01b1480611b3857506001600160e01b03198216635b5e139f60e01b145b806106c757506301ffc9a760e01b6001600160e01b03198316146106c7565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b8c82610bc1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611c3e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d4565b6000611c4983610bc1565b9050806001600160a01b0316846001600160a01b03161480611c845750836001600160a01b0316611c798461075f565b6001600160a01b0316145b80611cb457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611ccf82610bc1565b6001600160a01b031614611d375760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107d4565b6001600160a01b038216611d995760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d4565b611da48383836124ca565b611daf600082611b57565b6001600160a01b0383166000908152600360205260408120805460019290611dd8908490613a65565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e069084906139f5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6610969d374b92b0341015611ead5760405162461bcd60e51b815260206004820152600c60248201526b65746820746f6f206c65737360a01b60448201526064016107d4565b611eb78282612582565b6610969d374b92b0341115610d7757336108fc611edb6610969d374b92b034613a65565b6040518115909202916000818181858888f1935050505015801561090a573d6000803e3d6000fd5b6000611f0f8484610d7b565b6000818152600b60205260409020600201549091506001600160a01b03163314611f7b5760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206469646e2774206275796564207468697320746f6b656e000060448201526064016107d4565b6000818152600b6020526040902060030154600160a81b900460ff1615611fd55760405162461bcd60e51b815260206004820152600e60248201526d1d1bdad95b881a5cc819da5d995960921b60448201526064016107d4565b6001600160a01b038083166000818152600c60209081526040808320548352600b90915290206003015490911614156120505760405162461bcd60e51b815260206004820152601c60248201527f6769766564416464726573732068617665206769766564206c616e640000000060448201526064016107d4565b6000818152600b602090815260408083206003018054600161ff0160a01b0319166001600160a01b038716908117600160a81b179091558352600c909152902081905561209d8282612818565b60408051600f86810b825285900b60208201526001600160a01b038416918101919091527f315581f8fced1d4d8d321a598f896b9f857c52dfefae7188fbfde64900d62d9b906060016119d7565b6120fd6610969d374b92b06002613a46565b34101561213b5760405162461bcd60e51b815260206004820152600c60248201526b65746820746f6f206c65737360a01b60448201526064016107d4565b6121458484612582565b61214f8282612582565b6121616610969d374b92b06002613a46565b34111561134357336108fc61217e6610969d374b92b06002613a46565b6121889034613a65565b6040518115909202916000818181858888f193505050501580156121b0573d6000803e3d6000fd5b5050505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612214848484611cbc565b61222084848484612832565b6113435760405162461bcd60e51b81526004016107d49061390a565b606081516000141561225c57505060408051602081019091526000815290565b6000604051806060016040528060408152602001613b8b604091399050600060038451600261228b91906139f5565b6122959190613a32565b6122a0906004613a46565b905060006122af8260206139f5565b67ffffffffffffffff8111156122d557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122ff576020820181803683370190505b509050818152600183018586518101602084015b8183101561236b576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101612313565b6003895106600181146123855760028114612396576123a2565b613d3d60f01b6001198301526123a2565b603d60f81b6000198301525b509398975050505050505050565b6060816123d45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156123fe57806123e881613ae3565b91506123f79050600a83613a32565b91506123d8565b60008167ffffffffffffffff81111561242757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612451576020820181803683370190505b5090505b8415611cb457612466600183613a65565b9150612473600a86613b1e565b61247e9060306139f5565b60f81b8183815181106124a157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506124c3600a86613a32565b9450612455565b6001600160a01b0383166125255761252081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612548565b816001600160a01b0316836001600160a01b03161461254857612548838261293f565b6001600160a01b03821661255f5761090a816129dc565b826001600160a01b0316826001600160a01b03161461090a5761090a8282612ab5565b336000908152600e6020526040902054600260ff909116106125e05760405162461bcd60e51b815260206004820152601760248201527618d85b1b195c881a5cc8185b1c9958591e48189d5e5959604a1b60448201526064016107d4565b60006125ec8383610d7b565b6000818152600b6020526040902060030154909150600160a01b900460ff16156126485760405162461bcd60e51b815260206004820152600d60248201526c1b185b99081a5cc8189d5e5959609a1b60448201526064016107d4565b6040518060e0016040528084600f0b815260200183600f0b81526020016040518060200160405280600081525081526020016126813390565b6001600160a01b0316815260006020808301829052600160408085018290526060909401839052858352600b825291839020845185830151600f90810b6001600160801b03908116600160801b029290910b161781559284015180516126ee938501929190910190612cb7565b5060608201516002820180546001600160a01b0319166001600160a01b0392831617905560808301516003909201805460a085015160c090950151939092166001600160a81b031990921691909117600160a01b931515939093029290921760ff60a81b1916600160a81b91151591909102179055336000818152600d6020908152604080832080546001818101835591855283852001869055938352600e909152812080549091906127a590849060ff16613a0d565b92506101000a81548160ff021916908360ff1602179055507fe20b07b22286906698dfaed9341c2187f29ec7e118f5283cd0b81d3796fc0c1783836127e73390565b60408051600f94850b81529290930b60208301526001600160a01b03168183015290519081900360600190a1505050565b610d77828260405180602001604052806000815250612af9565b60006001600160a01b0384163b1561293457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906128769033908990889088906004016137ed565b602060405180830381600087803b15801561289057600080fd5b505af19250505080156128c0575060408051601f3d908101601f191682019092526128bd91810190612f7a565b60015b61291a573d8080156128ee576040519150601f19603f3d011682016040523d82523d6000602084013e6128f3565b606091505b5080516129125760405162461bcd60e51b81526004016107d49061390a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cb4565b506001949350505050565b6000600161294c84610c38565b6129569190613a65565b6000838152600760205260409020549091508082146129a9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906129ee90600190613a65565b60008381526009602052604081205460088054939450909284908110612a2457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612a5357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612a9957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612ac083610c38565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b612b038383612b2c565b612b106000848484612832565b61090a5760405162461bcd60e51b81526004016107d49061390a565b6001600160a01b038216612b825760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d4565b6000818152600260205260409020546001600160a01b031615612be75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d4565b612bf3600083836124ca565b6001600160a01b0382166000908152600360205260408120805460019290612c1c9084906139f5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6040805160e08101825260008082526020820181905260609282018390529181018290526080810182905260a0810182905260c081019190915290565b828054612cc390613aa8565b90600052602060002090601f016020900481019282612ce55760008555612d2b565b82601f10612cfe57805160ff1916838001178555612d2b565b82800160010185558215612d2b579182015b82811115612d2b578251825591602001919060010190612d10565b50612d37929150612d3b565b5090565b5b80821115612d375760008155600101612d3c565b600067ffffffffffffffff80841115612d6b57612d6b613b5e565b604051601f8501601f19908116603f01168101908282118183101715612d9357612d93613b5e565b81604052809350858152868686011115612dac57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114612ddd57600080fd5b919050565b8035600f81900b8114612ddd57600080fd5b600060208284031215612e05578081fd5b612e0e82612dc6565b9392505050565b60008060408385031215612e27578081fd5b612e3083612dc6565b9150612e3e60208401612dc6565b90509250929050565b600080600060608486031215612e5b578081fd5b612e6484612dc6565b9250612e7260208501612dc6565b9150604084013590509250925092565b60008060008060808587031215612e97578081fd5b612ea085612dc6565b9350612eae60208601612dc6565b925060408501359150606085013567ffffffffffffffff811115612ed0578182fd5b8501601f81018713612ee0578182fd5b612eef87823560208401612d50565b91505092959194509250565b60008060408385031215612f0d578182fd5b612f1683612dc6565b915060208301358015158114612f2a578182fd5b809150509250929050565b60008060408385031215612f47578182fd5b612f5083612dc6565b946020939093013593505050565b600060208284031215612f6f578081fd5b8135612e0e81613b74565b600060208284031215612f8b578081fd5b8151612e0e81613b74565b60008060408385031215612fa8578182fd5b612fb183612de2565b9150612e3e60208401612de2565b600080600060608486031215612fd3578283fd5b612fdc84612de2565b9250612fea60208501612de2565b9150612ff860408501612dc6565b90509250925092565b60008060008060008060c08789031215613019578182fd5b61302287612de2565b955061303060208801612de2565b945061303e60408801612dc6565b935061304c60608801612de2565b925061305a60808801612de2565b915061306860a08801612dc6565b90509295509295509295565b60008060008060808587031215613089578182fd5b61309285612de2565b93506130a060208601612de2565b92506130ae60408601612de2565b91506130bc60608601612de2565b905092959194509250565b6000806000606084860312156130db578081fd5b6130e484612de2565b92506130f260208501612de2565b9150604084013567ffffffffffffffff81111561310d578182fd5b8401601f8101861361311d578182fd5b61312c86823560208401612d50565b9150509250925092565b600060208284031215613147578081fd5b5035919050565b60008151808452613166816020860160208601613a7c565b601f01601f19169290920160200192915050565b6000815161318c818560208601613a7c565b9290920192915050565b8051600f0b82526020810151600f0b60208301526000604082015160e060408501526131c560e085018261314e565b9050606083015160018060a01b038082166060870152806080860151166080870152505060a0830151151560a085015260c0830151151560c08501528091505092915050565b6000855161321d818460208a01613a7c565b855190830190613231818360208a01613a7c565b600b60fa1b9101908152845161324e816001840160208901613a7c565b8451910190613264816001840160208801613a7c565b016001019695505050505050565b721e3234bb1031b630b9b99e913737ba32b9911f60691b8152701e3234bb1f2737ba32b99d1e17b234bb1f60791b60138201527f3c6469763e2d204c6f6f746c616e64206973206372656174656420666f72206260248201526c3ab4b63232b9399e17b234bb1f60991b60448201527f3c6469763e2d204f6e6c7920696e766974656420746f2062652061206275696c6051820152683232b91e17b234bb1f60b91b60718201527f3c6469763e2d2045616368206275696c6465722063616e206f6e6c7920627579607a8201526f103a3bb7903630b732399e17b234bb1f60811b609a8201527f3c6469763e2d204f6e6c79206f6e6520706572736f6e2063616e20626520696e60aa8201527f766974656420746f2065616368206c616e643c2f6469763e000000000000000060ca8201527f3c6469763e2d204561636820706572736f6e2063616e206f6e6c79206163636560e28201527f707420616e20696e7669746174696f6e206f6e63653c2f6469763e00000000006101028201527f3c6469763e2d2045616368206c616e64206973203130302a313030207371756161011d8201526e39329036b2ba32b9399e17b234bb1f60891b61013d820152651e17b234bb1f60d11b61014c820152600061015282016106c7565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f73766722207072657365727665417370656374526174696f3d22784d6960208201527f6e594d696e206d656574222076696577426f783d22302030203336302033363060408201527f223e3c726563742077696474683d223130302522206865696768743d2231303060608201527f25222066696c6c3d222330463443383122202f3e3c666f726569676e4f626a6560808201527f63742077696474683d2233363022206865696768743d223336302220783d223060a08201527f2220793d2230223e3c626f647920786d6c6e733d22687474703a2f2f7777772e60c08201527f77332e6f72672f313939392f7868746d6c223e3c7374796c653e2e626173652060e08201527f7b666f6e742d66616d696c793a73616e732d73657269663b6d617267696e3a316101008201527f3070783b7d2e736f6c6f67616e207b20636f6c6f723a20234630454445353b206101208201527f666f6e742d73697a653a20313870783b6d617267696e2d746f703a333070783b6101408201527f6865696768743a20393070783b207d2e6c616e64207b20636f6c6f723a2023436101608201527f30443732353b20666f6e742d73697a653a20323470783b206865696768743a206101808201527f363070783b207d2e6e6f746573207b20636f6c6f723a20234135423844303b206101a08201527f666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c64697620636101c08201526b3630b9b99e913130b9b2911f60a11b6101e082015260006136fb6136c66136c06136ba6101ec86018961317a565b8761317a565b8561317a565b7f3c2f6469763e3c2f626f64793e3c2f666f726569676e4f626a6563743e3c2f738152623b339f60e91b602082015260230190565b95945050505050565b7f646174613a6170706c69636174696f6e2f7376673b6261736536342c0000000081526000825161373c81601c850160208701613a7c565b91909101601c0192915050565b7f3c64697620636c6173733d226c616e64223e4c6f6f746c616e6420280000000081526000825161378181601c850160208701613a7c565b66149e17b234bb1f60c91b601c939091019283015250602301919050565b741e3234bb1031b630b9b99e9139b7b637b3b0b7111f60591b815281516000906137d0816015850160208701613a7c565b651e17b234bb1f60d11b6015939091019283015250601b01919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906138209083018461314e565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561387e57603f1988860301845261386c858351613196565b94509285019290850190600101613850565b5092979650505050505050565b8215158152604060208201526000611cb46040830184613196565b83600f0b815282600f0b60208201526060604082015260006136fb606083018461314e565b602081526000612e0e602083018461314e565b60208082526012908201527118d85b1b195c881a5cc81b9bc819da5d995960721b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b602081526000612e0e6020830184613196565b60008219821115613a0857613a08613b32565b500190565b600060ff821660ff84168060ff03821115613a2a57613a2a613b32565b019392505050565b600082613a4157613a41613b48565b500490565b6000816000190483118215151615613a6057613a60613b32565b500290565b600082821015613a7757613a77613b32565b500390565b60005b83811015613a97578181015183820152602001613a7f565b838111156113435750506000910152565b600181811c90821680613abc57607f821691505b60208210811415613add57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613af757613af7613b32565b5060010190565b600060ff821660ff811415613b1557613b15613b32565b60010192915050565b600082613b2d57613b2d613b48565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461177357600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f496e766974696e67207468652074616c656e74656420796f7520746f206265636f6d652061206c6f6f747665727365206275696c64657220666f7220746865206e6578742031302079656172732c20416e6420466f7220796f75206f6e206d79207369646520626f756768743aa2646970667358221220332bb335077120ba871df244b6a9efdf1f2b5e46b0ad1bfbc050802e32aa156e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2140,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_lands",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Land)3228_storage)"
      },
      {
        "astId": 2144,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_gived",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2149,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "_buyLandTokenIds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2154,
        "contract": "contracts/LootLand.sol:LootLand",
        "label": "buyLandCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Land)3228_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILootLand.Land)",
        "numberOfBytes": "32",
        "value": "t_struct(Land)3228_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Land)3228_storage": {
        "encoding": "inplace",
        "label": "struct ILootLand.Land",
        "members": [
          {
            "astId": 3215,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3217,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "y",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3219,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "slogan",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3221,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "buyedAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3223,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "givedAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3225,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "isBuyed",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 3227,
            "contract": "contracts/LootLand.sol:LootLand",
            "label": "isGived",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}